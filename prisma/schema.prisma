// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    // Do not use foreign keys (PlanetScale does not support them)
    relationMode = "prisma"
}

model Character {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User    @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

model Profession {
    id          Int     @id @default(autoincrement())
    name        ProfessionName
    craftOrder  Boolean     @default(false)
    instructor  Boolean     @default(false)
    expedition  Boolean     @default(false)
    consortium  Boolean     @default(false)
    drops       Boolean     @default(false)
    treatise    Boolean     @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum ProfessionName {
    ALCHEMY
    BLACKSMITHING
    ENCHANTING
    ENGINEERING
    INSCRIPTION
    JEWELCRAFTING
    LEATHERWORKING
    TAILORING
    HERBALISM
    MINING
    SKINNING
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    characters    Character[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
